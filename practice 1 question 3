#include<iostream>
#include<iomanip>
using namespace std;

class Account{
    protected:
    double balance;
    public:
    Account(double bal) : balance(bal) {}
    virtual void calculateInterest() = 0;
    virtual ~Account(){}
};
class SavingsAccount : public Account {
    double rate;
    int time;
public:
    SavingsAccount(double bal, double r, int t) : Account(bal), rate(r), time(t) {}

    void calculateInterest() override {
        double interest = (balance * rate * time) / 100.0;
        cout << "Savings Account Interest: " << fixed << setprecision(2) << interest << endl;
    }
};
class CurrentAccount : public Account {
    double maintenanceFee;
public:
    CurrentAccount(double bal, double fee) : Account(bal), maintenanceFee(fee) {}

    void calculateInterest() override {
        balance -= maintenanceFee;
        cout << "Balance after fee deduction: " << fixed << setprecision(2) << balance << endl;
    }
};

int main() {
    int accountType;
    cout << "Enter Account Type (1 for Savings, 2 for Current): ";
    cin >> accountType;

    if (accountType == 1) {
        double balance, rate;
        int time;
        cout << "Enter Balance: ";
        cin >> balance;
        cout << "Enter Interest Rate (%): ";
        cin >> rate;
        cout << "Enter Time (years): ";
        cin >> time;

        if (balance < 1000 || balance > 1000000 || rate < 1 || rate > 15 || time < 1 || time > 10) {
            cout << "Invalid input values." << endl;
            return 1;
        }

        SavingsAccount sa(balance, rate, time);
        sa.calculateInterest();

    } else if (accountType == 2) {
        double balance, fee;
        cout << "Enter Balance: ";
        cin >> balance;
        cout << "Enter Monthly Maintenance Fee: ";
        cin >> fee;

        if (balance < 1000 || balance > 1000000 || fee < 50 || fee > 500) {
            cout << "Invalid input values." << endl;
            return 1;
        }

        CurrentAccount ca(balance, fee);
        ca.calculateInterest();

    } else {
        cout << "Invalid account type." << endl;
    }

    return 0;
}
